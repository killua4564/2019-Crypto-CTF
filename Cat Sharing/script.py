from gmpy import next_prime
from sympy import invert
from Crypto.Util.number import long_to_bytes

'''
r = u + 2v
s = 3u + v
==> 2s - r = 5u
==> 3r - s = 5v
'''

x = 29169469951053295574081524059511535140827283191073251776995458401426751335067978224073517175066569709975139345222677517823282108654144344668206951295920733865048193562823092960410199979804386493444569565801190392203155582443887810481911785072200479531562344730825301324306290366963374793938436402536235751046
n = 87995963705775252652902721333907731539211925670258267633625334592684122942357226180852429359176006366878142442513953441034915209172535208468117104886941195190984514419906417536826283135891378770042001164393213815646704419253174664971044632616940041563748768493413579796262475648325000703887764944685010024337
phi = 87995963705775252652902721333907731539211925670258267633625334592684122942357226180852429359176006366878142442513953441034915209172535208468117105152559536379768449721582745181807824724938894947268104359039873535516591412297194883059558364240000402862207672404172393583217829233259557249428015013428243679784
R = 24577912044004448595463057779637545000863729896975449607106255001057277303457321766887564462859651873899271719758660726875817220988246251622444695051161733113960
S = 30101504230956252554214968662602777204908308733370256591337015850221220287755935456120201522030432241746171795099896635419686586404004906003066839175499231676280

r, s = R, S
for _ in range(12):
	r, s = (2 * s - r) // 5, (3 * r - s) // 5

r, s = next_prime(r - 1000), next_prime(s - 1000)
participants_key = []
for _ in range(14):
	u, v = int(next_prime(r)), int(next_prime(s))
	u -= u % 4
	v -= v % 8
	phi = phi - u - v
	participants_key.append((u, v))
	r, s = u + 2 * v, v + 3 * u

assert participants_key[12] == (R, S)
open("participants.key", "w").write(str(participants_key))

x = pow(x, phi // 4, n)
enc = eval(open("flag.enc", "r").read().replace("L", ""))
enc = ''.join(['1' if pow(ee, phi // 4, n) == x else "0" for ee in enc])
print(long_to_bytes(int(enc, 2)).decode())