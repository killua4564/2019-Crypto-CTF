from sympy import invert, root
from Crypto.Util.number import *

n = 161010103536746712075112156042553283066813155993777943981946663919051986586388748662616958741697621238654724628406094469789970509959159343108847331259823125490271091357244742345403096394500947202321339572876147277506789731024810289354756781901338337411136794489136638411531539112369520980466458615878975406339
ct = 64166146958225113130966383399465462600516627646827654061505253681784027524205938322376396685421354659091159523153346321216052274404398431369574383580893610370389016662302880230566394277969479472339696624461863666891731292801506958051383432113998695237733732222591191217365300789670291769876292466495287189494
x = 153801856029563198525204130558738800846256680799373350925981555360388985602786501362501554433635610131437376183630577217917787342621398264625389914280509
y = 8086061902465799210233863613232941060876437002894022994953293934963170056653232109405937694010696299303888742108631749969054117542816358078039478109426

'''
p / p+1 + q+1 / q = (2pq + p + q + 1) / (pq + q)
2s - x = 2pq + p + q + 1
s + y = pq + q
==> x + 2y = -p + q - 1
==> (x + 2y + 1)q = q**2 - n
==> q**2 - (x + 2y + 1)q - n = 0
'''

a = 1
b = -(x + 2 * y + 1)
c = -n
d = int(root(b ** 2 - 4 * a * c, 2))
q = (-b + d) // (2 * a)
p = n // q

assert isPrime(p) and isPrime(q)
assert p * q == n

d = int(invert(0x10001, (p-1)*(q-1)))
print(long_to_bytes(int(root(pow(ct, d, n), 2))))